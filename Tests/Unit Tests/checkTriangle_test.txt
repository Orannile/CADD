******************************************************
Test #1: Not in triangle
 
Code:

      real(dp) :: orig(2), a1(2), a2(2)
      real(dp) :: fac
      integer :: i
      real(dp) :: y, ydisp
      logical :: failure
      real(dp) :: disp(2)

      nodes%nnodes = 9
      allocate(nodes%posn(7,nodes%nnodes))
      nodes%posn = 0.0_dp
      orig = [0.0_dp,0.0_dp]
      a1 = [1.0_dp,0.0_dp]
      a2 = [-0.5_dp,0.5_dp*sqrt(3.0_dp)]
      nodes%posn(1:2,3) = orig
      nodes%posn(1:2,4) = orig + a1
      nodes%posn(1:2,5) = orig - a1
      nodes%posn(1:2,6) = orig + a2
      nodes%posn(1:2,7) = orig + a1 + a2
      nodes%posn(1:2,8) = orig - a2
      nodes%posn(1:2,9) = orig - a1 - a2
      
      allocate(nodes%types(3,nodes%nnodes))
      nodes%types(:,1) = [1,0,0]
      nodes%types(:,2) = [1,0,0]
      do i = 3, nodes%nnodes
          nodes%types(:,i) = [1,1,0]
      end do
      
      call processNodeData()
      
C     stretch in y-direction
      fac = 0.2_dp
      do i = 1, size(nodes%posn,1)
          y = nodes%posn(2,i)
          ydisp = fac*y
          nodes%posn(5,i) = nodes%posn(5,i) + ydisp
          nodes%posn(2,i) = nodes%posn(2,i) + ydisp
      end do
      
      neighbors%nmaxbin = 30
      neighbors%nmaxneigh = 30
      neighbors%rneigh = 0.5_dp
      neighbors%rneighsq = 0.25_dp
      neighbors%rhomax = 1.0_dp
      allocate(neighbors%binlist(2,nodes%natoms)) 
      
      call genAtomBinsUndeformed()
      movingmesh%delaunay%nodenums = nodes%atomlist
      call setDelaunayPosUndef(movingmesh%delaunay)
      call genDelaunay(movingmesh%delaunay)
      
      call prettyPrintMat(movingmesh%delaunay%trivert,'Vertices')
      
      call initFELibrary()
      movingmesh%eltypenum = getElTypeNum('CPE3') ! triangle
      
      call checkTriangle([0.5_dp,0.5_dp],1,failure,disp)
      write(*,*) 'failed?', failure      

Output:
 failed? T      
******************************************************
Test #2: In triangle
 
Code:

      real(dp) :: orig(2), a1(2), a2(2)
      real(dp) :: fac
      integer :: i
      real(dp) :: y, ydisp
      logical :: failure
      real(dp) :: disp(2), posnundef(2)
      integer :: trinum

      nodes%nnodes = 9
      allocate(nodes%posn(7,nodes%nnodes))
      nodes%posn = 0.0_dp
      orig = [0.0_dp,0.0_dp]
      a1 = [1.0_dp,0.0_dp]
      a2 = [-0.5_dp,0.5_dp*sqrt(3.0_dp)]
      nodes%posn(1:2,3) = orig
      nodes%posn(1:2,4) = orig + a1
      nodes%posn(1:2,5) = orig - a1
      nodes%posn(1:2,6) = orig + a2
      nodes%posn(1:2,7) = orig + a1 + a2
      nodes%posn(1:2,8) = orig - a2
      nodes%posn(1:2,9) = orig - a1 - a2
      
      allocate(nodes%types(3,nodes%nnodes))
      nodes%types(:,1) = [1,0,0]
      nodes%types(:,2) = [1,0,0]
      do i = 3, nodes%nnodes
          nodes%types(:,i) = [1,1,0]
      end do
      
      call processNodeData()
      
C     stretch in y-direction
      fac = 0.2_dp
      do i = 1, size(nodes%posn,1)
          y = nodes%posn(2,i)
          ydisp = fac*y
          nodes%posn(5,i) = nodes%posn(5,i) + ydisp
          nodes%posn(2,i) = nodes%posn(2,i) + ydisp
      end do
      
      neighbors%nmaxbin = 30
      neighbors%nmaxneigh = 30
      neighbors%rneigh = 0.5_dp
      neighbors%rneighsq = 0.25_dp
      neighbors%rhomax = 1.0_dp
      allocate(neighbors%binlist(2,nodes%natoms)) 
      
      call genAtomBinsUndeformed()
      movingmesh%delaunay%nodenums = nodes%atomlist
      call setDelaunayPosUndef(movingmesh%delaunay)
      call genDelaunay(movingmesh%delaunay)
      
      call prettyPrintMat(movingmesh%delaunay%trivert,'Vertices')
      
      call initFELibrary()
      movingmesh%eltypenum = getElTypeNum('CPE3') ! triangle
      
      posnundef = [0.5_dp,0.5_dp]
      trinum = 6
      call checkTriangle(posnundef,trinum,failure,disp)
      write(*,*) 'failed?', failure
      write(*,*) 'Displacement', disp
      write(*,*) 'Expected displacement', [0.0_dp,fac*posnundef(2)]      

Output:
 failed? F
 Displacement   0.0000000000000000       0.10000000000000002     
 Expected displacement   0.0000000000000000       0.10000000000000001         
******************************************************
Test #3: In deformed triangle, but not original
 
Code:

      real(dp) :: orig(2), a1(2), a2(2)
      real(dp) :: fac
      integer :: i
      real(dp) :: y, ydisp
      logical :: failure
      real(dp) :: disp(2), posnundef(2)
      integer :: trinum

      nodes%nnodes = 9
      allocate(nodes%posn(7,nodes%nnodes))
      nodes%posn = 0.0_dp
      orig = [0.0_dp,0.0_dp]
      a1 = [1.0_dp,0.0_dp]
      a2 = [-0.5_dp,0.5_dp*sqrt(3.0_dp)]
      nodes%posn(1:2,3) = orig
      nodes%posn(1:2,4) = orig + a1
      nodes%posn(1:2,5) = orig - a1
      nodes%posn(1:2,6) = orig + a2
      nodes%posn(1:2,7) = orig + a1 + a2
      nodes%posn(1:2,8) = orig - a2
      nodes%posn(1:2,9) = orig - a1 - a2
      
      allocate(nodes%types(3,nodes%nnodes))
      nodes%types(:,1) = [1,0,0]
      nodes%types(:,2) = [1,0,0]
      do i = 3, nodes%nnodes
          nodes%types(:,i) = [1,1,0]
      end do
      
      call processNodeData()
      
C     stretch in y-direction
      fac = 0.2_dp
      do i = 1, size(nodes%posn,1)
          y = nodes%posn(2,i)
          ydisp = fac*y
          nodes%posn(5,i) = nodes%posn(5,i) + ydisp
          nodes%posn(2,i) = nodes%posn(2,i) + ydisp
      end do
      
      neighbors%nmaxbin = 30
      neighbors%nmaxneigh = 30
      neighbors%rneigh = 0.5_dp
      neighbors%rneighsq = 0.25_dp
      neighbors%rhomax = 1.0_dp
      allocate(neighbors%binlist(2,nodes%natoms)) 
      
      call genAtomBinsUndeformed()
      movingmesh%delaunay%nodenums = nodes%atomlist
      call setDelaunayPosUndef(movingmesh%delaunay)
      call genDelaunay(movingmesh%delaunay)
      
      call prettyPrintMat(movingmesh%delaunay%trivert,'Vertices')
      
      call initFELibrary()
      movingmesh%eltypenum = getElTypeNum('CPE3') ! triangle
      
      posnundef = [0.5_dp,1.0_dp]
      trinum = 6
      call checkTriangle(posnundef,trinum,failure,disp)
      write(*,*) 'failed?', failure     

Output:
 failed? T    
******************************************************