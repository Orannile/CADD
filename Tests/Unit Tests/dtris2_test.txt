******************************************************
Test #1:
 
Code:

integer :: point_num
real(dp) :: point_xy(2,5)
integer, allocatable :: tri_vert(:,:), tri_nabe(:,:)
real(dp) :: a1(2), a2(2)

point_num = 5
a1 = [1.0_dp,0.0_dp]
a2 = [0.5_dp,0.5_dp*sqrt(3.0_dp)]
point_xy(:,1) = [0.0_dp,0.0_dp]
point_xy(:,2) = a1
point_xy(:,3) = a2
point_xy(:,4) = a2 - a1
point_xy(:,5) = 2*a2 - a1

call dtris2(point_num,point_xy,tri_vert,tri_nabe)

call prettyPrintMat(tri_vert,'vertices')
call prettyPrintMat(tri_nabe,'neighbors')

Output:
 vertices
           4           5           3
           1           4           1
           3           3           2
 neighbors
         -10          -3           1
           3           1         -11
           2          -6          -8
******************************************************
Test #2:
 
Code:

integer :: point_num
real(dp) :: point_xy(2,5)
integer, allocatable :: tri_vert(:,:), tri_nabe(:,:)
real(dp) :: a1(2), a2(2)

point_num = 5
a1 = [1.0_dp,0.0_dp]
a2 = [0.5_dp,0.5_dp*sqrt(3.0_dp)]
point_xy(:,1) = a1
point_xy(:,2) = 2*a1
point_xy(:,3) = a2
point_xy(:,4) = a2 - a1
point_xy(:,5) = 2*a2 - a1

call dtris2(point_num,point_xy,tri_vert,tri_nabe)

call prettyPrintMat(tri_vert,'vertices')
call prettyPrintMat(tri_nabe,'neighbors')

Output:
 vertices
           5           3           3           5
           4           4           1           3
           3           1           2           2
 neighbors
          -7           1           2           1
           2         -10         -14           3
           4           3           4          -3
******************************************************