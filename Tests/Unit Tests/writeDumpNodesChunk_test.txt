******************************************************
Test #1:

Code:

      integer :: iunit
      integer :: nnodes
      character(len=:), allocatable :: dumpfile
      
      nmaterials = 1
      nnodes = 3
      nodes%nnodes = nnodes
      allocate(nodes%posn(7,nnodes))
      allocate(nodes%types(3,nnodes))
      nodes%posn(:,1) = [1.0_dp,2.0_dp,0.5_dp,1.0_dp,2.0_dp,
     &                   0.4_dp,0.5_dp]
      nodes%posn(:,2) = [4.0_dp,piconst,0.5_dp,0.0_dp,0.0_dp,
     &                   0.3_dp,0.2_dp]
      nodes%posn(:,3) = [0.45_dp,-0.33_dp,0.5_dp,0.0_dp,0.5_dp,
     &                   0.3_dp,0.2_dp]
      nodes%types(:,1) = [1,1,3]
      nodes%types(:,2) = [1,1,0]
      nodes%types(:,3) = [2,-1,0]
      misc%simname = 'test_nodes'
      dumpfile = getDumpFilename()
      open(newunit=iunit,file=dumpfile)
      call writeDumpNodesChunk(iunit,.true.) ! deformed positions

Output: See test_nodes.0.dump

 ******************************************************
 Test #2:

Code:

      integer :: iunit
      integer :: nnodes
      character(len=:), allocatable :: dumpfile
      
      nmaterials = 1
      nnodes = 3
      nodes%nnodes = nnodes
      allocate(nodes%posn(7,nnodes))
      allocate(nodes%types(3,nnodes))
      nodes%posn(:,1) = [1.0_dp,2.0_dp,0.5_dp,1.0_dp,2.0_dp,
     &                   0.4_dp,0.5_dp]
      nodes%posn(:,2) = [4.0_dp,piconst,0.5_dp,0.0_dp,0.0_dp,
     &                   0.3_dp,0.2_dp]
      nodes%posn(:,3) = [0.45_dp,-0.33_dp,0.5_dp,0.0_dp,0.5_dp,
     &                   0.3_dp,0.2_dp]
      nodes%types(:,1) = [1,1,3]
      nodes%types(:,2) = [1,1,0]
      nodes%types(:,3) = [2,-1,0]
      misc%simname = 'test_nodes_undef'
      dumpfile = getDumpFilename()
      open(newunit=iunit,file=dumpfile)
      call writeDumpNodesChunk(iunit,.false.) ! undeformed positions

Output: See test_nodes_undef.0.dump

 ******************************************************