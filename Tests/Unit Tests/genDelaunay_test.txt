******************************************************
Test #1:
 
Code:

integer :: point_num
real(dp) :: point_xy(2,5)
real(dp) :: a1(2), a2(2)

point_num = 5
a1 = [1.0_dp,0.0_dp]
a2 = [0.5_dp,0.5_dp*sqrt(3.0_dp)]
point_xy(:,1) = [0.0_dp,0.0_dp]
point_xy(:,2) = a1
point_xy(:,3) = a2
point_xy(:,4) = a2 - a1
point_xy(:,5) = 2*a2 - a1
delaunay%numpoints = point_num
delaunay%xy = point_xy
delaunay%circumradiussqcutoff = 1.1_dp*(1.0_dp/sqrt(3.0_dp))**2

call genDelaunay()
call prettyPrintMat(delaunay%trivert,'vertices')
call prettyPrintMat(delaunay%trivert,'neighbors')
write(*,*) 'good'
write(*,*) delaunay%trigood

Output:
 vertices
           4           5           3
           1           4           1
           3           3           2
 neighbors
           4           5           3
           1           4           1
           3           3           2
 good
 T T T 
******************************************************
Test #2: (Circumradius of equilateral triangle is S/sqrt(3))
 
Code:

integer :: point_num
real(dp) :: point_xy(2,5)
real(dp) :: a1(2), a2(2)

point_num = 5
a1 = [1.0_dp,0.0_dp]
a2 = [0.5_dp,0.5_dp*sqrt(3.0_dp)]
point_xy(:,1) = a1
point_xy(:,2) = 2*a1
point_xy(:,3) = a2
point_xy(:,4) = a2 - a1
point_xy(:,5) = 2*a2 - a1
delaunay%numpoints = point_num
delaunay%xy = point_xy
delaunay%circumradiussqcutoff = 1.1_dp*(1.0_dp/sqrt(3.0_dp))**2

call genDelaunay()
call prettyPrintMat(delaunay%trivert,'vertices')
call prettyPrintMat(delaunay%trivert,'neighbors')
write(*,*) 'good'
write(*,*) delaunay%trigood

Output:
 vertices
           5           3           3           5
           4           4           1           3
           3           1           2           2
 neighbors
           5           3           3           5
           4           4           1           3
           3           1           2           2
 good
 T F F F
******************************************************