******************************************************
Test #1:
 
Code:

real(dp) :: A(2,1)
A(:,1) = [0.0_dp,4.0_dp]
call mergeSortColsReal(A,1,2,2)
call prettyPrintMat(A,'A')

Output:
 A
   0.0000000000000000     
   4.0000000000000000     
******************************************************
Test #2:
 
Code:

real(dp) :: A(2,2)
A(:,1) = [0.0_dp,4.0_dp]
A(:,2) = [1.0_dp,4.0_dp]
call mergeSortColsReal(A,2,2,2)
call prettyPrintMat(A,'A')

Output:
 A
   0.0000000000000000        1.0000000000000000     
   4.0000000000000000        4.0000000000000000     
******************************************************
Test #3:
 
Code:

real(dp) :: A(2,2)
A(:,1) = [0.0_dp,4.0_dp]
A(:,2) = [0.0_dp,3.0_dp]
call mergeSortColsReal(A,2,2,2)
call prettyPrintMat(A,'A')

Output:
 A
   0.0000000000000000        0.0000000000000000     
   3.0000000000000000        4.0000000000000000     
******************************************************
Test #4:
 
Code:

real(dp) :: A(2,2)
A(:,1) = [0.0_dp,4.0_dp]
A(:,2) = [0.0_dp,3.0_dp]
call mergeSortColsReal(A,2,1,2)
call prettyPrintMat(A,'A')

Output:
 A
   0.0000000000000000        0.0000000000000000     
   4.0000000000000000        3.0000000000000000
******************************************************
Test #5:
 
Code:

real(dp) :: A(2,2)
A(:,1) = [1.0_dp,4.0_dp]
A(:,2) = [0.0_dp,3.0_dp]
call mergeSortColsReal(A,2,2,2)
call prettyPrintMat(A,'A')

Output:
 A
   0.0000000000000000        1.0000000000000000     
   3.0000000000000000        4.0000000000000000     
******************************************************
Test #6:
 
Code:

real(dp) :: A(2,9)
A(:,1) = [2.0_dp,3.0_dp]
A(:,2) = [2.0_dp,4.0_dp]
A(:,3) = [5.0_dp,6.0_dp]
A(:,4) = [5.0_dp,7.0_dp]
A(:,5) = [6.0_dp,2.0_dp]
A(:,6) = [2.0_dp,2.0_dp]
A(:,7) = [3.0_dp,3.0_dp]
A(:,8) = [6.0_dp,1.0_dp]
A(:,9) = [6.0_dp,2.0_dp]
call mergeSortColsReal(A,9,2,2)
call prettyPrintMat(A,'A')

Output:
 A
   2.0000000000000000        2.0000000000000000        2.0000000000000000        3.0000000000000000        5.0000000000000000        5.0000000000000000        6.0000000000000000        6.0000000000000000        6.0000000000000000     
   2.0000000000000000        3.0000000000000000        4.0000000000000000        3.0000000000000000        6.0000000000000000        7.0000000000000000        1.0000000000000000        2.0000000000000000        2.0000000000000000     
******************************************************
Test #7:
 
Code:

real(dp) :: A(2,9)
A(:,9) = [2.0_dp,3.0_dp]
A(:,2) = [2.0_dp,4.0_dp]
A(:,3) = [5.0_dp,6.0_dp]
A(:,4) = [5.0_dp,7.0_dp]
A(:,5) = [6.0_dp,2.0_dp]
A(:,6) = [2.0_dp,2.0_dp]
A(:,7) = [3.0_dp,3.0_dp]
A(:,8) = [6.0_dp,1.0_dp]
A(:,1) = [6.0_dp,2.0_dp]
call mergeSortColsReal(A,9,2,2)
call prettyPrintMat(A,'A')

Output:
 A
   2.0000000000000000        2.0000000000000000        2.0000000000000000        3.0000000000000000        5.0000000000000000        5.0000000000000000        6.0000000000000000        6.0000000000000000        6.0000000000000000     
   2.0000000000000000        3.0000000000000000        4.0000000000000000        3.0000000000000000        6.0000000000000000        7.0000000000000000        1.0000000000000000        2.0000000000000000        2.0000000000000000     
******************************************************