******************************************************
Test #1: Perfect lattice
 
Code:

      integer :: point_num
      real(dp) :: point_xy(2,5)
      real(dp) :: a1(2), a2(2)
      type(delaunaydata) :: delaunay
      
      point_num = 5
      a1 = [1.0_dp,0.0_dp]
      a2 = [0.5_dp,0.5_dp*sqrt(3.0_dp)]
      point_xy(:,1) = [0.0_dp,0.0_dp]
      point_xy(:,2) = a1
      point_xy(:,3) = a2
      point_xy(:,4) = a2 - a1
      point_xy(:,5) = 2*a2 - a1
      delaunay%xy = point_xy
      delaunay%circumradiussqcutoff = 1.1_dp*(1.0_dp/sqrt(3.0_dp))**2
      
      call genDelaunay(delaunay)
      call genBadTriangles(delaunay)
      write(*,*) 'good'
      write(*,*) delaunay%trigood

Output:
 good
 T T T
******************************************************
Test #2: (Circumradius of equilateral triangle is S/sqrt(3))
 
Code:

      integer :: point_num
      real(dp) :: point_xy(2,5)
      real(dp) :: a1(2), a2(2)
      type(delaunaydata) :: delaunay
      
      point_num = 5
      a1 = [1.0_dp,0.0_dp]
      a2 = [0.5_dp,0.5_dp*sqrt(3.0_dp)]
      point_xy(:,1) = a1
      point_xy(:,2) = 2*a1
      point_xy(:,3) = a2
      point_xy(:,4) = a2 - a1
      point_xy(:,5) = 2*a2 - a1
      delaunay%xy = point_xy
      delaunay%circumradiussqcutoff = 1.1_dp*(1.0_dp/sqrt(3.0_dp))**2
      
      call genDelaunay(delaunay)
      call prettyPrintMat(delaunay%trivert,'vertices')
      call prettyPrintMat(delaunay%trivert,'neighbors')

Output:
 good
 T F F F
******************************************************